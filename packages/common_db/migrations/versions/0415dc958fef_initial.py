"""initial

Revision ID: 0415dc958fef
Revises: 
Create Date: 2025-01-14 14:30:36.073057

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

from common_db.config import db_settings
from common_db.functions import search_users

schema: str = db_settings.db.db_schema


# revision identifiers, used by Alembic.
revision: str = "0415dc958fef"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("surname", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("avatars", sa.ARRAY(sa.String(length=300)), nullable=True),
        sa.Column("about", sa.String(length=300), nullable=True),
        sa.Column(
            "interests",
            sa.ARRAY(
                sa.Enum(
                    "interest1",
                    "interest2",
                    name="user_interests_enum",
                    schema=f'{schema}',
                    inherit_schema=True,
                )
            ),
            nullable=True,
        ),
        sa.Column("linkedin_link", sa.String(length=100), nullable=True),
        sa.Column("telegram_name", sa.String(length=200), nullable=True),
        sa.Column("telegram_id", sa.BIGINT(), nullable=True),
        sa.Column(
            "expertise_area",
            sa.ARRAY(
                sa.Enum(
                    "development",
                    "devops",
                    "cyber_security",
                    "data_science",
                    "databases",
                    "cloud_technologies",
                    "technical_support",
                    "product_management",
                    "design",
                    "marketing",
                    "legal_services",
                    "finances",
                    "compliance",
                    "hr",
                    "pr",
                    "sales",
                    "business_development",
                    name="user_expertise_enum",
                    schema=f'{schema}',
                    inherit_schema=True,
                )
            ),
            nullable=True,
        ),
        sa.Column(
            "specialisation",
            sa.ARRAY(
                sa.Enum(
                    "frontend",
                    "backend",
                    "mobile",
                    "web",
                    "gamedev",
                    "embedded",
                    "nocode",
                    "net_administration",
                    "server_administration",
                    "virtualization",
                    "containerization",
                    "automatization",
                    "cloud_devops",
                    "serverless",
                    "vulnerability_assessment",
                    "pentesting",
                    "data_protection",
                    "incident_management",
                    "cryptography",
                    "app_security",
                    "net_security",
                    "cloud_security",
                    "devsecops",
                    "data_analysis",
                    "machine_learning",
                    "big_data",
                    "business_analytics",
                    "ai",
                    "social_media_analysis",
                    "bioinformatics",
                    "biometrics",
                    "clearml",
                    "db_administration",
                    "db_design",
                    "request_optimisation",
                    "dwh",
                    "nosql",
                    "cloud_platforms",
                    "cloud_infrastructure",
                    "cloud_resources_management",
                    "microservices",
                    "private_cloud",
                    "multi_cloud_strategies",
                    "help_desk",
                    "tech_support",
                    "equipment_incident_management",
                    "user_service",
                    "itsm",
                    "devops_support",
                    "product_lifetime_management",
                    "release_plans",
                    "requirements_management",
                    "ux_ui_design",
                    "product_analysis_optimisation",
                    "team_management",
                    "strategic_planning",
                    "data_driven_product_development",
                    "mvp_development",
                    "graphic_design",
                    "web_design",
                    "mobile_design",
                    "ux_design",
                    "interaction_design",
                    "visual_design",
                    "user_experience_design",
                    "design_systems",
                    "data_visualization",
                    "theed_design",
                    "ui_motion_design",
                    "wearables_design",
                    "digital_marketing",
                    "content_marketing",
                    "seo",
                    "smm",
                    "marketing_research",
                    "data_driven_marketing",
                    "go_to_market_strategy",
                    "developing_market_entry_plan",
                    "competitive_landscape_analysis",
                    "target_segments_defining",
                    "intellectual_property",
                    "software_licensing",
                    "privacy_and_data_protection",
                    "compliance_and_regulation",
                    "contract_law",
                    "tech_law",
                    "accounting",
                    "financial_planning_and_analysis",
                    "risk_management",
                    "taxation",
                    "financial_statements",
                    "financial_analytics_using_ai",
                    "compliance_with_regulatory_requirements",
                    "compliance_risk_management",
                    "internal_audits",
                    "anti_fraud",
                    "data_privacy_management",
                    "cyber_compliance",
                    "recruitment_of_staff",
                    "labor_relations_management",
                    "staff_training_and_development",
                    "talent_management_and_succession_planning",
                    "compensation_and_benefits",
                    "employee_performance_management",
                    "organizational_development_and_change",
                    "corporate_culture_and_employee_engagement",
                    "labor_legislation_and_regulatory_regulation",
                    "conflictology_and_resolution_of_labor_disputes",
                    "managing_remote_commands",
                    "strategic_communication_planning",
                    "media_relations",
                    "internal_communications",
                    "crisis_pr",
                    "reputation_management",
                    "working_with_social_media",
                    "organization_of_events",
                    "corporate_communications",
                    "work_with_public",
                    "content_development_and_copywriting",
                    "csr",
                    "b2b",
                    "b2c",
                    "sales_management",
                    "partner_network_development",
                    "sales_techniques_and_methodologies",
                    "training_and_development_of_sales_team",
                    "sales_support",
                    "competitor_and_market_analysis",
                    "business_strategic_planning",
                    "market_research_and_analysis",
                    "development_of_new_products_and_services",
                    "negotiating_and_concluding_deals",
                    "project_management",
                    "international_development",
                    "development_of_corporate_culture",
                    "financial_analysis_and_planning",
                    name="user_specialisation_enum",
                    schema=f'{schema}',
                    inherit_schema=True,
                )
            ),
            nullable=True,
        ),
        sa.Column(
            "grade",
            sa.Enum(
                "grade1",
                "grade2",
                name="user_grade_enum",
                schema=f'{schema}',
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column(
            "industry",
            sa.ARRAY(
                sa.Enum(
                    "industry1",
                    "industry2",
                    name="user_industry_enum",
                    schema=f'{schema}',
                    inherit_schema=True,
                )
            ),
            nullable=True,
        ),
        sa.Column(
            "skills",
            sa.ARRAY(
                sa.Enum(
                    "skill1",
                    "skill2",
                    name="user_skills_enum",
                    schema=f'{schema}',
                    inherit_schema=True,
                )
            ),
            nullable=True,
        ),
        sa.Column("current_company", sa.String(length=200), nullable=True),
        sa.Column(
            "company_services",
            sa.ARRAY(
                sa.Enum(
                    "vkservice1",
                    "yandexservice1",
                    name="user_company_services_enum",
                    schema=f'{schema}',
                    inherit_schema=True,
                )
            ),
            nullable=True,
        ),
        sa.Column(
            "location",
            sa.Enum(
                "moscow_russia",
                "london_uk",
                name="user_location_enum",
                schema=f'{schema}',
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column("referral", sa.Boolean(), nullable=False),
        sa.Column(
            "requests_to_community",
            sa.ARRAY(
                sa.Enum(
                    "friendship",
                    name="user_requests_to_community_enum",
                    schema=f'{schema}',
                    inherit_schema=True,
                )
            ),
            nullable=True,
        ),
        sa.Column("is_tg_bot_blocked", sa.Boolean(), nullable=False),
        sa.Column("blocked_status_update_date", sa.DateTime(), nullable=True),
        sa.Column(
            "who_to_date_with",
            sa.Enum(
                "friends",
                "anyone",
                name="user_with_whom_enum",
                schema=f'{schema}',
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column(
            "who_sees_profile",
            sa.Enum(
                "anyone",
                "nobody",
                name="user_visibility_settings_enum",
                schema=f'{schema}',
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "who_sees_current_job",
            sa.Enum(
                "anyone",
                "nobody",
                name="user_visibility_settings_enum",
                schema=f'{schema}',
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "who_sees_contacts",
            sa.Enum(
                "anyone",
                "nobody",
                name="user_visibility_settings_enum",
                schema=f'{schema}',
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "who_sees_calendar",
            sa.Enum(
                "anyone",
                "nobody",
                name="user_visibility_settings_enum",
                schema=f'{schema}',
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "available_meetings_pendings_count", sa.Integer(), nullable=False
        ),
        sa.Column(
            "available_meetings_confirmations_count",
            sa.Integer(),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f'{schema}',
    )
    op.create_index(
        "ix_users_telegram_id",
        "users",
        ["telegram_id"],
        unique=False,
        schema=f'{schema}',
    )
    op.create_table(
        "meeting_intents",
        sa.Column("user_id", sa.BIGINT(), nullable=False),
        sa.Column(
            "meeting_type",
            sa.Enum(
                "online",
                "offline",
                "both",
                name="meeting_intent_meeting_type",
                schema=f'{schema}',
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "query_type",
            sa.Enum(
                "interests_chatting",
                "offline_meeting",
                "news_discussion",
                "startup_discussion",
                "feedback",
                "cooperative_learning",
                "practical_discussion",
                "tools_discussion",
                "exam_preparation",
                "help_request",
                "looking_for",
                "mentoring",
                "other",
                name="meeting_intent_query_type",
                schema=f'{schema}',
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "help_request_type",
            sa.Enum(
                "management",
                "product",
                "development",
                "design",
                "marketing",
                "sales",
                "finance",
                "entrepreneurship",
                "hr",
                "business_development",
                "law",
                "other",
                name="meeting_intent_help_request_type",
                schema=f'{schema}',
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "looking_for_type",
            sa.Enum(
                "work",
                "part_time",
                "recommendation",
                "pet_project",
                "mock_interview_partner",
                "mentor",
                "mentee",
                "cofounder",
                "contributor",
                name="meeting_intent_looking_for_type",
                schema=f'{schema}',
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column("text_intent", sa.String(length=500), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            [f"{schema}.users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f'{schema}',
    )
    op.create_table(
        "matching_results",
        sa.Column(
            "model_settings_preset", sa.String(length=50), nullable=False
        ),
        sa.Column("match_users_count", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("form_id", sa.Integer(), nullable=True),
        sa.Column("intent_id", sa.Integer(), nullable=False),
        sa.Column("error_code", sa.String(length=50), nullable=True),
        sa.Column("error_details", sa.JSON(), nullable=True),
        sa.Column("matching_result", sa.ARRAY(sa.Integer()), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["intent_id"],
            [f"{schema}.meeting_intents.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            [f"{schema}.users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f'{schema}',
    )
    op.create_table(
        "meetings",
        sa.Column("organizer_id", sa.Integer(), nullable=False),
        sa.Column("match_id", sa.Integer(), nullable=True),
        sa.Column(
            "scheduled_time", sa.DateTime(timezone=True), nullable=False
        ),
        sa.Column(
            "location", 
            sa.Enum(
                "anywhere",
                "offline",
                "online",
                name="meeting_location_enum",
                schema=f'{schema}',
                inherit_schema=True,
            ),
            nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "no_answer",
                "archived",
                "confirmed",
                name="meeting_status_enum",
                schema=f'{schema}',
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["match_id"],
            [f"{schema}.matching_results.id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f'{schema}',
    )
    op.create_index(
        "ix_meeting_status",
        "meetings",
        ["status"],
        unique=False,
        schema=f'{schema}',
    )
    op.create_index(
        "ix_meeting_time",
        "meetings",
        ["scheduled_time"],
        unique=False,
        schema=f'{schema}',
    )
    op.create_table(
        "meeting_responses",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("meeting_id", sa.Integer(), nullable=False),
        sa.Column(
            "role",
            sa.Enum(
                "organizer",
                "attendee",
                name="meeting_user_role_enum",
                schema=f'{schema}',
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "response",
            sa.Enum(
                "no_answer",
                "confirmed",
                "declined",
                name="meeting_response_status_enum",
                schema=f'{schema}',
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["meeting_id"],
            [f"{schema}.meetings.id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            [f"{schema}.users.id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("user_id", "meeting_id"),
        schema=f'{schema}',
    )

    # creating a user search function based on the specified parameters
    op.execute(search_users.format(schema=schema))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # -----------drop functions-----------
    op.execute(f"DROP FUNCTION IF EXISTS {schema}.search_users")

    # ------------drop tables------------
    op.drop_table("matching_results", schema=f'{schema}')
    op.drop_table("meeting_responses", schema=f'{schema}')
    op.drop_table("meeting_intents", schema=f'{schema}')
    op.drop_index(
        "ix_form_intent_type",
        table_name="forms",
        schema=f'{schema}',
    )
    op.drop_table("forms", schema=f'{schema}')
    op.drop_index(
        "ix_users_telegram_id",
        table_name="users",
        schema=f'{schema}',
    )
    op.drop_table("users", schema=f'{schema}')
    op.drop_index(
        "ix_meeting_time",
        table_name="meetings",
        schema=f'{schema}',
    )
    op.drop_index(
        "ix_meeting_status",
        table_name="meetings",
        schema=f'{schema}',
    )
    op.drop_table("meetings", schema=f'{schema}')

    # -------------drop types-------------
    op.execute(f"DROP TYPE {schema}.meeting_status")
    op.execute(f"DROP TYPE {schema}.user_interests_enum")
    op.execute(f"DROP TYPE {schema}.user_expertise_enum")
    op.execute(f"DROP TYPE {schema}.user_specialisation_enum")
    op.execute(f"DROP TYPE {schema}.user_grade_enum")
    op.execute(f"DROP TYPE {schema}.user_industry_enum")
    op.execute(f"DROP TYPE {schema}.user_skills_enum")
    op.execute(f"DROP TYPE {schema}.user_company_services_enum")
    op.execute(f"DROP TYPE {schema}.user_location_enum")
    op.execute(f"DROP TYPE {schema}.user_requests_to_community_enum")
    op.execute(f"DROP TYPE {schema}.user_with_whom_enum")
    op.execute(f"DROP TYPE {schema}.user_visibility_settings_enum")
    op.execute(f"DROP TYPE {schema}.meeting_intent_meeting_type")
    op.execute(f"DROP TYPE {schema}.meeting_format")
    op.execute(f"DROP TYPE {schema}.meeting_intent_query_type")
    op.execute(f"DROP TYPE {schema}.meeting_intent_help_request_type")
    op.execute(f"DROP TYPE {schema}.meeting_intent_looking_for_type")
    op.execute(f"DROP TYPE {schema}.meeting_user_role")
    op.execute(f"DROP TYPE {schema}.meeting_response_status")
    op.execute(f"DROP FUNCTION IF EXISTS {schema}.search_users")
    # ### end Alembic commands ###

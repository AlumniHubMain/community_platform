"""initial

Revision ID: 0415dc958fef
Revises: 
Create Date: 2025-01-14 14:30:36.073057

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

from common_db.config import db_settings

schema: str = db_settings.db.db_schema


# revision identifiers, used by Alembic.
revision: str = "0415dc958fef"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "interests",
        sa.Column(
            "interest_area",
            sa.Enum(
                "interest1",
                "interest2",
                name="user_interests_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("is_custom", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_table(
        "requests_to_community",
        sa.Column(
            "requests_area",
            sa.Enum(
                "friendship",
                name="user_requests_to_community_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("is_custom", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_table(
        "skills",
        sa.Column(
            "skill_area",
            sa.Enum(
                "skill1",
                "skill2",
                name="user_skills_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("is_custom", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_table(
        "specialisations",
        sa.Column(
            "expertise_area",
            sa.Enum(
                "development",
                "devops",
                "cyber_security",
                "data_science",
                "databases",
                "cloud_technologies",
                "technical_support",
                "product_management",
                "design",
                "marketing",
                "legal_services",
                "finances",
                "compliance",
                "hr",
                "pr",
                "sales",
                "business_development",
                name="user_expertise_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("is_custom", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_table(
        "users",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("surname", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("avatars", sa.ARRAY(sa.String(length=300)), nullable=True),
        sa.Column("about", sa.String(length=300), nullable=True),
        sa.Column("linkedin_link", sa.String(length=100), nullable=True),
        sa.Column("telegram_name", sa.String(length=200), nullable=True),
        sa.Column("telegram_id", sa.BIGINT(), nullable=True),
        sa.Column("is_tg_bot_blocked", sa.Boolean(), nullable=False),
        sa.Column("blocked_status_update_date", sa.DateTime(), nullable=True),
        sa.Column("country", sa.String(), nullable=True),
        sa.Column("city", sa.String(), nullable=True),
        sa.Column("timezone", sa.String(), nullable=True),
        sa.Column("referral", sa.Boolean(), nullable=False),
        sa.Column("is_tg_notify", sa.Boolean(), nullable=False),
        sa.Column("is_email_notify", sa.Boolean(), nullable=False),
        sa.Column("is_push_notify", sa.Boolean(), nullable=False),
        sa.Column(
            "who_to_date_with",
            sa.Enum(
                "friends",
                "anyone",
                name="user_with_whom_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column(
            "who_sees_profile",
            sa.Enum(
                "anyone",
                "nobody",
                name="user_visibility_settings_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "who_sees_current_job",
            sa.Enum(
                "anyone",
                "nobody",
                name="user_visibility_settings_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "who_sees_contacts",
            sa.Enum(
                "anyone",
                "nobody",
                name="user_visibility_settings_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "who_sees_calendar",
            sa.Enum(
                "anyone",
                "nobody",
                name="user_visibility_settings_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "available_meetings_pendings_count", sa.Integer(), nullable=False
        ),
        sa.Column(
            "available_meetings_confirmations_count",
            sa.Integer(),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_index(
        "ix_users_telegram_id",
        "users",
        ["telegram_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "forms",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("form", sa.Text(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "intent_type",
            sa.Enum(
                "connect",
                "mentoring",
                "mock_interview",
                "help_request",
                "referal",
                name="meeting_intent_meeting_type",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "meeting_format",
            sa.Enum(
                "offline",
                "online",
                "both",
                name="meeting_format",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column("calendar", sa.String(length=200), nullable=False),
        sa.Column("available_meetings_count", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("user_id", "id"),
        schema=f"{schema}",
    )
    op.create_index(
        "ix_form_intent_type",
        "forms",
        ["intent_type"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "meeting_intents",
        sa.Column("user_id", sa.BIGINT(), nullable=False),
        sa.Column(
            "meeting_type",
            sa.Enum(
                "online",
                "offline",
                "both",
                name="meeting_intent_meeting_type",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "query_type",
            sa.Enum(
                "interests_chatting",
                "offline_meeting",
                "news_discussion",
                "startup_discussion",
                "feedback",
                "cooperative_learning",
                "practical_discussion",
                "tools_discussion",
                "exam_preparation",
                "help_request",
                "looking_for",
                "mentoring",
                "other",
                name="meeting_intent_query_type",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "help_request_type",
            sa.Enum(
                "management",
                "product",
                "development",
                "design",
                "marketing",
                "sales",
                "finance",
                "entrepreneurship",
                "hr",
                "business_development",
                "law",
                "other",
                name="meeting_intent_help_request_type",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "looking_for_type",
            sa.Enum(
                "work",
                "part_time",
                "recommendation",
                "pet_project",
                "mock_interview_partner",
                "mentor",
                "mentee",
                "cofounder",
                "contributor",
                name="meeting_intent_looking_for_type",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column("text_intent", sa.String(length=500), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_table(
        "users_industries",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "label",
            sa.Enum(
                "industry1",
                "industry2",
                name="user_industry_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_users_industries_user_id"),
        "users_industries",
        ["user_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "users_interests",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("interest_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["interest_id"],
            ["alh_community_platform.interests.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "interest_id"),
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_users_interests_interest_id"),
        "users_interests",
        ["interest_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_users_interests_user_id"),
        "users_interests",
        ["user_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "users_requests_to_community",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("requests_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["requests_id"],
            ["alh_community_platform.requests_to_community.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "requests_id"),
        schema=f"{schema}",
    )
    op.create_index(
        op.f(
            "ix_alh_community_platform_users_requests_to_community_requests_id"
        ),
        "users_requests_to_community",
        ["requests_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_users_requests_to_community_user_id"),
        "users_requests_to_community",
        ["user_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "users_skills",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("skill_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["skill_id"],
            ["alh_community_platform.skills.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "skill_id"),
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_users_skills_skill_id"),
        "users_skills",
        ["skill_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_users_skills_user_id"),
        "users_skills",
        ["user_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "users_specialisations",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("specialisation_id", sa.Integer(), nullable=False),
        sa.Column(
            "grade",
            sa.Enum(
                "grade1",
                "grade2",
                name="user_grade_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["specialisation_id"],
            ["alh_community_platform.specialisations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "specialisation_id"),
        schema=f"{schema}",
    )
    op.create_index(
        op.f(
            "ix_alh_community_platform_users_specialisations_specialisation_id"
        ),
        "users_specialisations",
        ["specialisation_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_users_specialisations_user_id"),
        "users_specialisations",
        ["user_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "matching_results",
        sa.Column(
            "model_settings_preset", sa.String(length=50), nullable=False
        ),
        sa.Column("match_users_count", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("form_id", sa.Integer(), nullable=True),
        sa.Column("intent_id", sa.Integer(), nullable=False),
        sa.Column("error_code", sa.String(length=50), nullable=True),
        sa.Column("error_details", sa.JSON(), nullable=True),
        sa.Column("matching_result", sa.ARRAY(sa.Integer()), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["intent_id"],
            ["alh_community_platform.meeting_intents.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_table(
        "meetings",
        sa.Column("organizer_id", sa.Integer(), nullable=False),
        sa.Column("match_id", sa.Integer(), nullable=True),
        sa.Column(
            "scheduled_time", sa.DateTime(timezone=True), nullable=False
        ),
        sa.Column(
            "location",
            sa.Enum(
                "anywhere",
                "offline",
                "online",
                name="meeting_location_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "no_answer",
                "archived",
                "confirmed",
                name="meeting_status_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["match_id"],
            ["alh_community_platform.matching_results.id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["organizer_id"],
            ["alh_community_platform.users.id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_index(
        "ix_meeting_status",
        "meetings",
        ["status"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_index(
        "ix_meeting_time",
        "meetings",
        ["scheduled_time"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "meeting_responses",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("meeting_id", sa.Integer(), nullable=False),
        sa.Column(
            "role",
            sa.Enum(
                "organizer",
                "attendee",
                name="meeting_user_role_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "response",
            sa.Enum(
                "no_answer",
                "confirmed",
                "declined",
                name="meeting_response_status_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["meeting_id"],
            ["alh_community_platform.meetings.id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("user_id", "meeting_id"),
        schema=f"{schema}",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("meeting_responses", schema=f"{schema}")
    op.drop_index(
        "ix_meeting_time",
        table_name="meetings",
        schema=f"{schema}",
    )
    op.drop_index(
        "ix_meeting_status",
        table_name="meetings",
        schema=f"{schema}",
    )
    op.drop_table("meetings", schema=f"{schema}")
    op.drop_table("matching_results", schema=f"{schema}")
    op.drop_index(
        op.f("ix_alh_community_platform_users_specialisations_user_id"),
        table_name="users_specialisations",
        schema=f"{schema}",
    )
    op.drop_index(
        op.f(
            "ix_alh_community_platform_users_specialisations_specialisation_id"
        ),
        table_name="users_specialisations",
        schema=f"{schema}",
    )
    op.drop_table("users_specialisations", schema=f"{schema}")
    op.drop_index(
        op.f("ix_alh_community_platform_users_skills_user_id"),
        table_name="users_skills",
        schema=f"{schema}",
    )
    op.drop_index(
        op.f("ix_alh_community_platform_users_skills_skill_id"),
        table_name="users_skills",
        schema=f"{schema}",
    )
    op.drop_table("users_skills", schema=f"{schema}")
    op.drop_index(
        op.f("ix_alh_community_platform_users_requests_to_community_user_id"),
        table_name="users_requests_to_community",
        schema=f"{schema}",
    )
    op.drop_index(
        op.f(
            "ix_alh_community_platform_users_requests_to_community_requests_id"
        ),
        table_name="users_requests_to_community",
        schema=f"{schema}",
    )
    op.drop_table(
        "users_requests_to_community", schema=f"{schema}"
    )
    op.drop_index(
        op.f("ix_alh_community_platform_users_interests_user_id"),
        table_name="users_interests",
        schema=f"{schema}",
    )
    op.drop_index(
        op.f("ix_alh_community_platform_users_interests_interest_id"),
        table_name="users_interests",
        schema=f"{schema}",
    )
    op.drop_table("users_interests", schema=f"{schema}")
    op.drop_index(
        op.f("ix_alh_community_platform_users_industries_user_id"),
        table_name="users_industries",
        schema=f"{schema}",
    )
    op.drop_table("users_industries", schema=f"{schema}")
    op.drop_table("meeting_intents", schema=f"{schema}")
    op.drop_index(
        "ix_form_intent_type",
        table_name="forms",
        schema=f"{schema}",
    )
    op.drop_table("forms", schema=f"{schema}")
    op.drop_index(
        "ix_users_telegram_id",
        table_name="users",
        schema=f"{schema}",
    )
    op.drop_table("users", schema=f"{schema}")
    op.drop_table("specialisations", schema=f"{schema}")
    op.drop_table("skills", schema=f"{schema}")
    op.drop_table("requests_to_community", schema=f"{schema}")
    op.drop_table("interests", schema=f"{schema}")

    # -------------drop types-------------
    op.execute(f"DROP TYPE {schema}.user_interests_enum")
    op.execute(f"DROP TYPE {schema}.user_expertise_enum")
    op.execute(f"DROP TYPE {schema}.user_grade_enum")
    op.execute(f"DROP TYPE {schema}.user_industry_enum")
    op.execute(f"DROP TYPE {schema}.user_skills_enum")
    op.execute(f"DROP TYPE {schema}.user_requests_to_community_enum")
    op.execute(f"DROP TYPE {schema}.user_with_whom_enum")
    op.execute(f"DROP TYPE {schema}.user_visibility_settings_enum")
    op.execute(f"DROP TYPE {schema}.meeting_intent_meeting_type")
    op.execute(f"DROP TYPE {schema}.meeting_format")
    op.execute(f"DROP TYPE {schema}.meeting_intent_query_type")
    op.execute(f"DROP TYPE {schema}.meeting_intent_help_request_type")
    op.execute(f"DROP TYPE {schema}.meeting_intent_looking_for_type")
    # ### end Alembic commands ###

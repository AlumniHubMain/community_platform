"""Initial migration

Revision ID: 2a6447a937bd
Revises: 
Create Date: 2025-02-16 19:59:24.836632

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from common_db.config import db_settings

schema: str = db_settings.db.db_schema

# revision identifiers, used by Alembic.
revision: str = "2a6447a937bd"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "interests",
        sa.Column(
            "interest_area",
            sa.Enum(
                "interest1",
                "interest2",
                name="user_interests_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("is_custom", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_table(
        "linkedin_api_limits",
        sa.Column("provider_type", sa.String(), nullable=False),
        sa.Column("provider_id", sa.String(), nullable=False),
        sa.Column("credits_left", sa.Integer(), nullable=False),
        sa.Column("rate_limit_left", sa.Integer(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_index(
        "idx_limits_status",
        "linkedin_api_limits",
        ["credits_left", "rate_limit_left"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_index(
        "idx_provider_unique",
        "linkedin_api_limits",
        ["provider_type", "provider_id"],
        unique=True,
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_linkedin_api_limits_provider_type"),
        "linkedin_api_limits",
        ["provider_type"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "linkedin_raw_data",
        sa.Column("target_linkedin_url", sa.String(), nullable=False),
        sa.Column(
            "raw_data", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("parsed_date", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_linkedin_raw_data_parsed_date"),
        "linkedin_raw_data",
        ["parsed_date"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_index(
        op.f(
            "ix_alh_community_platform_linkedin_raw_data_target_linkedin_url"
        ),
        "linkedin_raw_data",
        ["target_linkedin_url"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "requests_to_community",
        sa.Column(
            "requests_area",
            sa.Enum(
                "friendship",
                name="user_requests_to_community_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("is_custom", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_table(
        "skills",
        sa.Column(
            "skill_area",
            sa.Enum(
                "skill1",
                "skill2",
                name="user_skills_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("is_custom", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_table(
        "specialisations",
        sa.Column(
            "expertise_area",
            sa.Enum(
                "development",
                "devops",
                "cyber_security",
                "data_science",
                "databases",
                "cloud_technologies",
                "technical_support",
                "product_management",
                "design",
                "marketing",
                "legal_services",
                "finances",
                "compliance",
                "hr",
                "pr",
                "sales",
                "business_development",
                name="user_expertise_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("is_custom", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_table(
        "users",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("surname", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("avatars", sa.ARRAY(sa.String(length=300)), nullable=True),
        sa.Column("about", sa.String(length=300), nullable=True),
        sa.Column("linkedin_link", sa.String(length=100), nullable=True),
        sa.Column("telegram_name", sa.String(length=200), nullable=True),
        sa.Column("telegram_id", sa.BIGINT(), nullable=True),
        sa.Column("is_tg_bot_blocked", sa.Boolean(), nullable=False),
        sa.Column("blocked_status_update_date", sa.DateTime(), nullable=True),
        sa.Column("country", sa.String(), nullable=True),
        sa.Column("city", sa.String(), nullable=True),
        sa.Column("timezone", sa.String(), nullable=True),
        sa.Column("referral", sa.Boolean(), nullable=False),
        sa.Column("is_tg_notify", sa.Boolean(), nullable=False),
        sa.Column("is_email_notify", sa.Boolean(), nullable=False),
        sa.Column("is_push_notify", sa.Boolean(), nullable=False),
        sa.Column(
            "who_to_date_with",
            sa.Enum(
                "friends",
                "anyone",
                name="user_with_whom_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column(
            "who_sees_profile",
            sa.Enum(
                "anyone",
                "nobody",
                name="user_visibility_settings_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "who_sees_current_job",
            sa.Enum(
                "anyone",
                "nobody",
                name="user_visibility_settings_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "who_sees_contacts",
            sa.Enum(
                "anyone",
                "nobody",
                name="user_visibility_settings_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "who_sees_calendar",
            sa.Enum(
                "anyone",
                "nobody",
                name="user_visibility_settings_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "available_meetings_pendings_count", sa.Integer(), nullable=False
        ),
        sa.Column(
            "available_meetings_confirmations_count",
            sa.Integer(),
            nullable=False,
        ),
        sa.Column(
            "profile_type",
            sa.Enum(
                "New",
                "MigratedWOIssues",
                "MigratedHasIssues",
                "MigratedIssuesFixed",
                name="user_profile_type_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_index(
        "ix_users_telegram_id",
        "users",
        ["telegram_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "forms",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "intent",
            sa.Enum(
                "connects",
                "referrals_recommendation",
                "mentoring_mentor",
                "mentoring_mentee",
                "mock_interview",
                "projects_find_contributor",
                "projects_find_cofounder",
                "projects_pet_project",
                name="form_intent_type_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column("content", sa.JSON(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("user_id", "id"),
        schema=f"{schema}",
    )
    op.create_index(
        "ix_form_intent",
        "forms",
        ["intent"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "linkedin_profiles",
        sa.Column("users_id_fk", sa.Integer(), nullable=True),
        sa.Column("public_identifier", sa.String(), nullable=True),
        sa.Column("linkedin_identifier", sa.String(), nullable=True),
        sa.Column("member_identifier", sa.String(), nullable=True),
        sa.Column("linkedin_url", sa.String(), nullable=True),
        sa.Column("first_name", sa.String(), nullable=True),
        sa.Column("last_name", sa.String(), nullable=True),
        sa.Column("headline", sa.Text(), nullable=True),
        sa.Column("location", sa.String(), nullable=True),
        sa.Column("summary", sa.Text(), nullable=True),
        sa.Column("photo_url", sa.String(), nullable=True),
        sa.Column("background_url", sa.String(), nullable=True),
        sa.Column("is_open_to_work", sa.Boolean(), nullable=True),
        sa.Column("is_premium", sa.Boolean(), nullable=True),
        sa.Column("pronoun", sa.String(), nullable=True),
        sa.Column("is_verification_badge_shown", sa.Boolean(), nullable=True),
        sa.Column("creation_date", sa.DateTime(), nullable=True),
        sa.Column("follower_count", sa.Integer(), nullable=True),
        sa.Column("parsed_date", sa.DateTime(), nullable=False),
        sa.Column(
            "skills",
            postgresql.JSONB(none_as_null=True, astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "languages",
            postgresql.JSONB(none_as_null=True, astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "recommendations",
            postgresql.JSONB(none_as_null=True, astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "certifications",
            postgresql.JSONB(none_as_null=True, astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column("is_currently_employed", sa.Boolean(), nullable=True),
        sa.Column("current_jobs_count", sa.Integer(), nullable=True),
        sa.Column("current_company_label", sa.String(), nullable=True),
        sa.Column("current_company_linkedin_id", sa.String(), nullable=True),
        sa.Column("current_position_title", sa.String(), nullable=True),
        sa.Column("current_company_linkedin_url", sa.String(), nullable=True),
        sa.Column("is_target_company_found", sa.Boolean(), nullable=True),
        sa.Column(
            "target_company_positions_count", sa.Integer(), nullable=True
        ),
        sa.Column("target_company_label", sa.String(), nullable=True),
        sa.Column("target_company_linkedin_id", sa.String(), nullable=True),
        sa.Column("target_position_title", sa.String(), nullable=True),
        sa.Column("target_company_linkedin_url", sa.String(), nullable=True),
        sa.Column(
            "is_employee_in_target_company", sa.Boolean(), nullable=True
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["users_id_fk"],
            ["alh_community_platform.users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("users_id_fk"),
        schema=f"{schema}",
    )
    op.create_table(
        "matching_results",
        sa.Column(
            "model_settings_preset", sa.String(length=50), nullable=False
        ),
        sa.Column("match_users_count", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("form_id", sa.Integer(), nullable=True),
        sa.Column("error_code", sa.String(length=50), nullable=True),
        sa.Column("error_details", sa.JSON(), nullable=True),
        sa.Column("matching_result", sa.ARRAY(sa.Integer()), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_table(
        "users_industries",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "label",
            sa.Enum(
                "industry1",
                "industry2",
                name="user_industry_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_users_industries_user_id"),
        "users_industries",
        ["user_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "users_interests",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("interest_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["interest_id"],
            ["alh_community_platform.interests.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "interest_id"),
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_users_interests_interest_id"),
        "users_interests",
        ["interest_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_users_interests_user_id"),
        "users_interests",
        ["user_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "users_requests_to_community",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("requests_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["requests_id"],
            ["alh_community_platform.requests_to_community.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "requests_id"),
        schema=f"{schema}",
    )
    op.create_index(
        op.f(
            "ix_alh_community_platform_users_requests_to_community_requests_id"
        ),
        "users_requests_to_community",
        ["requests_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_users_requests_to_community_user_id"),
        "users_requests_to_community",
        ["user_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "users_skills",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("skill_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["skill_id"],
            ["alh_community_platform.skills.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "skill_id"),
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_users_skills_skill_id"),
        "users_skills",
        ["skill_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_users_skills_user_id"),
        "users_skills",
        ["user_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "users_specialisations",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("specialisation_id", sa.Integer(), nullable=False),
        sa.Column(
            "grade",
            sa.Enum(
                "senior",
                "middle",
                "junior",
                name="user_grade_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["specialisation_id"],
            ["alh_community_platform.specialisations.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "specialisation_id"),
        schema=f"{schema}",
    )
    op.create_index(
        op.f(
            "ix_alh_community_platform_users_specialisations_specialisation_id"
        ),
        "users_specialisations",
        ["specialisation_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_users_specialisations_user_id"),
        "users_specialisations",
        ["user_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "linkedin_education",
        sa.Column("profile_id", sa.Integer(), nullable=False),
        sa.Column("school", sa.String(), nullable=False),
        sa.Column("degree", sa.String(), nullable=True),
        sa.Column("field_of_study", sa.String(), nullable=True),
        sa.Column("start_date", sa.DateTime(), nullable=True),
        sa.Column("end_date", sa.DateTime(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("linkedin_url", sa.String(), nullable=True),
        sa.Column("school_logo", sa.String(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["profile_id"],
            ["alh_community_platform.linkedin_profiles.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "profile_id", "school", "degree", name="uq_education_profile_url"
        ),
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_linkedin_education_profile_id"),
        "linkedin_education",
        ["profile_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "linkedin_experience",
        sa.Column("profile_id", sa.Integer(), nullable=False),
        sa.Column("company_label", sa.String(), nullable=True),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("company_linkedin_url", sa.String(), nullable=True),
        sa.Column("location", sa.String(), nullable=True),
        sa.Column("start_date", sa.DateTime(), nullable=True),
        sa.Column("end_date", sa.DateTime(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("duration", sa.String(), nullable=True),
        sa.Column("employment_type", sa.String(), nullable=True),
        sa.Column("company_logo", sa.String(), nullable=True),
        sa.Column("linkedin_url", sa.String(), nullable=True),
        sa.Column("linkedin_id", sa.String(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["profile_id"],
            ["alh_community_platform.linkedin_profiles.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "profile_id",
            "company_label",
            "title",
            name="uq_work_experience_profile_url",
        ),
        schema=f"{schema}",
    )
    op.create_index(
        op.f("ix_alh_community_platform_linkedin_experience_profile_id"),
        "linkedin_experience",
        ["profile_id"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_table(
        "meetings",
        sa.Column("organizer_id", sa.Integer(), nullable=False),
        sa.Column("match_id", sa.Integer(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "scheduled_time", sa.DateTime(timezone=True), nullable=False
        ),
        sa.Column(
            "location",
            sa.Enum(
                "anywhere",
                "offline",
                "online",
                name="meeting_location_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "no_answer",
                "archived",
                "confirmed",
                name="meeting_status_enum",
                schema=f"{schema}",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["match_id"],
            ["alh_community_platform.matching_results.id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["organizer_id"],
            ["alh_community_platform.users.id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("organizer_id", "match_id", "id"),
        schema=f"{schema}",
    )
    op.create_index(
        "ix_meeting_status",
        "meetings",
        ["status"],
        unique=False,
        schema=f"{schema}",
    )
    op.create_index(
        "ix_meeting_time",
        "meetings",
        ["scheduled_time"],
        unique=False,
        schema=f"{schema}",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "ix_meeting_time",
        table_name="meetings",
        schema=f"{schema}",
    )
    op.drop_index(
        "ix_meeting_status",
        table_name="meetings",
        schema=f"{schema}",
    )
    op.drop_table("meetings", schema=f"{schema}")
    op.drop_index(
        op.f("ix_alh_community_platform_linkedin_experience_profile_id"),
        table_name="linkedin_experience",
        schema=f"{schema}",
    )
    op.drop_table("linkedin_experience", schema=f"{schema}")
    op.drop_index(
        op.f("ix_alh_community_platform_linkedin_education_profile_id"),
        table_name="linkedin_education",
        schema=f"{schema}",
    )
    op.drop_table("linkedin_education", schema=f"{schema}")
    op.drop_index(
        op.f("ix_alh_community_platform_users_specialisations_user_id"),
        table_name="users_specialisations",
        schema=f"{schema}",
    )
    op.drop_index(
        op.f(
            "ix_alh_community_platform_users_specialisations_specialisation_id"
        ),
        table_name="users_specialisations",
        schema=f"{schema}",
    )
    op.drop_table("users_specialisations", schema=f"{schema}")
    op.drop_index(
        op.f("ix_alh_community_platform_users_skills_user_id"),
        table_name="users_skills",
        schema=f"{schema}",
    )
    op.drop_index(
        op.f("ix_alh_community_platform_users_skills_skill_id"),
        table_name="users_skills",
        schema=f"{schema}",
    )
    op.drop_table("users_skills", schema=f"{schema}")
    op.drop_index(
        op.f("ix_alh_community_platform_users_requests_to_community_user_id"),
        table_name="users_requests_to_community",
        schema=f"{schema}",
    )
    op.drop_index(
        op.f(
            "ix_alh_community_platform_users_requests_to_community_requests_id"
        ),
        table_name="users_requests_to_community",
        schema=f"{schema}",
    )
    op.drop_table(
        "users_requests_to_community", schema=f"{schema}"
    )
    op.drop_index(
        op.f("ix_alh_community_platform_users_interests_user_id"),
        table_name="users_interests",
        schema=f"{schema}",
    )
    op.drop_index(
        op.f("ix_alh_community_platform_users_interests_interest_id"),
        table_name="users_interests",
        schema=f"{schema}",
    )
    op.drop_table("users_interests", schema=f"{schema}")
    op.drop_index(
        op.f("ix_alh_community_platform_users_industries_user_id"),
        table_name="users_industries",
        schema=f"{schema}",
    )
    op.drop_table("users_industries", schema=f"{schema}")
    op.drop_table("matching_results", schema=f"{schema}")
    op.drop_table("linkedin_profiles", schema=f"{schema}")
    op.drop_index(
        "ix_form_intent", table_name="forms", schema=f"{schema}"
    )
    op.drop_table("forms", schema=f"{schema}")
    op.drop_index(
        "ix_users_telegram_id",
        table_name="users",
        schema=f"{schema}",
    )
    op.drop_table("users", schema=f"{schema}")
    op.drop_table("specialisations", schema=f"{schema}")
    op.drop_table("skills", schema=f"{schema}")
    op.drop_table("requests_to_community", schema=f"{schema}")
    op.drop_index(
        op.f(
            "ix_alh_community_platform_linkedin_raw_data_target_linkedin_url"
        ),
        table_name="linkedin_raw_data",
        schema=f"{schema}",
    )
    op.drop_index(
        op.f("ix_alh_community_platform_linkedin_raw_data_parsed_date"),
        table_name="linkedin_raw_data",
        schema=f"{schema}",
    )
    op.drop_table("linkedin_raw_data", schema=f"{schema}")
    op.drop_index(
        op.f("ix_alh_community_platform_linkedin_api_limits_provider_type"),
        table_name="linkedin_api_limits",
        schema=f"{schema}",
    )
    op.drop_index(
        "idx_provider_unique",
        table_name="linkedin_api_limits",
        schema=f"{schema}",
    )
    op.drop_index(
        "idx_limits_status",
        table_name="linkedin_api_limits",
        schema=f"{schema}",
    )
    op.drop_table("linkedin_api_limits", schema=f"{schema}")
    op.drop_table("interests", schema=f"{schema}")

    # -------------drop types-------------
    op.execute(f"DROP TYPE {schema}.user_interests_enum")
    op.execute(f"DROP TYPE {schema}.user_requests_to_community_enum")
    op.execute(f"DROP TYPE {schema}.user_skills_enum")
    op.execute(f"DROP TYPE {schema}.user_expertise_enum")
    op.execute(f"DROP TYPE {schema}.user_with_whom_enum")
    op.execute(f"DROP TYPE {schema}.user_visibility_settings_enum")
    op.execute(f"DROP TYPE {schema}.user_profile_type_enum")
    op.execute(f"DROP TYPE {schema}.form_intent_type_enum")
    op.execute(f"DROP TYPE {schema}.user_industry_enum")
    op.execute(f"DROP TYPE {schema}.user_grade_enum")
    op.execute(f"DROP TYPE {schema}.meeting_location_enum")
    op.execute(f"DROP TYPE {schema}.meeting_status_enum")
    # ### end Alembic commands ###

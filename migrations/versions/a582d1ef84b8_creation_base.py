"""creation base

Revision ID: a582d1ef84b8
Revises: 
Create Date: 2024-12-14 14:49:46.335388

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from backend.db_proxy.common_db.db_abstract import schema
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "a582d1ef84b8"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "meetings",
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("location", sa.String(length=200), nullable=True),
        sa.Column(
            "scheduled_time", sa.DateTime(timezone=True), nullable=False
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "new", "confirmed", "archived", name="meeting_status"
            ),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="alh_community_platform",
    )
    op.create_index(
        "ix_meeting_status",
        "meetings",
        ["status"],
        unique=False,
        schema="alh_community_platform",
    )
    op.create_index(
        "ix_meeting_time",
        "meetings",
        ["scheduled_time"],
        unique=False,
        schema="alh_community_platform",
    )
    op.create_table(
        "tg_bot_logging_events",
        sa.Column("telegram_name", sa.String(), nullable=True),
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "event_type",
            sa.Enum(
                "message",
                "callback",
                name="tg_event_type",
                schema="alh_community_platform",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column("event_name", sa.String(), nullable=False),
        sa.Column("bot_state", sa.String(), nullable=True),
        sa.Column("content", sa.String(), nullable=True),
        sa.Column("chat_title", sa.String(), nullable=True),
        sa.Column("chat_id", sa.BigInteger(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="alh_community_platform",
    )
    op.create_table(
        "tg_bot_staff",
        sa.Column("telegram_name", sa.String(), nullable=False),
        sa.Column("telegram_id", sa.BigInteger(), nullable=True),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("surname", sa.String(), nullable=True),
        sa.Column("bio", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("phone_number", sa.String(), nullable=True),
        sa.Column(
            "role",
            sa.Enum(
                "admin",
                "manager",
                "community_manager",
                "activists_manager",
                "recruitment_manager",
                "mentoring_manager",
                name="tg_staff_role",
                schema="alh_community_platform",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="alh_community_platform",
    )
    op.create_table(
        "users",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("surname", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("avatars", sa.ARRAY(sa.String(length=300)), nullable=True),
        sa.Column("about", sa.String(length=300), nullable=True),
        sa.Column(
            "interests",
            sa.ARRAY(
                sa.Enum(
                    "interest1",
                    "interest2",
                    name="user_interests_enum",
                    schema="alh_community_platform",
                    inherit_schema=True,
                )
            ),
            nullable=True,
        ),
        sa.Column("linkedin_link", sa.String(length=100), nullable=True),
        sa.Column("telegram_name", sa.String(length=200), nullable=True),
        sa.Column("telegram_id", sa.BIGINT(), nullable=True),
        sa.Column(
            "expertise_area",
            sa.ARRAY(
                sa.Enum(
                    "development",
                    "devops",
                    "cyber_security",
                    "data_science",
                    "databases",
                    "cloud_technologies",
                    "technical_support",
                    "product_management",
                    "design",
                    "marketing",
                    "legal_services",
                    "finances",
                    "compliance",
                    "hr",
                    "pr",
                    "sales",
                    "business_development",
                    name="user_expertise_enum",
                    schema="alh_community_platform",
                    inherit_schema=True,
                )
            ),
            nullable=True,
        ),
        sa.Column(
            "specialisation",
            sa.ARRAY(
                sa.Enum(
                    "frontend",
                    "backend",
                    "mobile",
                    "web",
                    "gamedev",
                    "embedded",
                    "nocode",
                    "net_administration",
                    "server_administration",
                    "virtualization",
                    "containerization",
                    "automatization",
                    "cloud_devops",
                    "serverless",
                    "vulnerability_assessment",
                    "pentesting",
                    "data_protection",
                    "incident_management",
                    "cryptography",
                    "app_security",
                    "net_security",
                    "cloud_security",
                    "devsecops",
                    "data_analysis",
                    "machine_learning",
                    "big_data",
                    "business_analytics",
                    "ai",
                    "social_media_analysis",
                    "bioinformatics",
                    "biometrics",
                    "clearml",
                    "db_administration",
                    "db_design",
                    "request_optimisation",
                    "dwh",
                    "nosql",
                    "cloud_platforms",
                    "cloud_infrastructure",
                    "cloud_resources_management",
                    "microservices",
                    "private_cloud",
                    "multi_cloud_strategies",
                    "help_desk",
                    "tech_support",
                    "equipment_incident_management",
                    "user_service",
                    "itsm",
                    "devops_support",
                    "product_lifetime_management",
                    "release_plans",
                    "requirements_management",
                    "ux_ui_design",
                    "product_analysis_optimisation",
                    "team_management",
                    "strategic_planning",
                    "data_driven_product_development",
                    "mvp_development",
                    "graphic_design",
                    "web_design",
                    "mobile_design",
                    "ux_design",
                    "interaction_design",
                    "visual_design",
                    "user_experience_design",
                    "design_systems",
                    "data_visualization",
                    "theed_design",
                    "ui_motion_design",
                    "wearables_design",
                    "digital_marketing",
                    "content_marketing",
                    "seo",
                    "smm",
                    "marketing_research",
                    "data_driven_marketing",
                    "go_to_market_strategy",
                    "developing_market_entry_plan",
                    "competitive_landscape_analysis",
                    "target_segments_defining",
                    "intellectual_property",
                    "software_licensing",
                    "privacy_and_data_protection",
                    "compliance_and_regulation",
                    "contract_law",
                    "tech_law",
                    "accounting",
                    "financial_planning_and_analysis",
                    "risk_management",
                    "taxation",
                    "financial_statements",
                    "financial_analytics_using_ai",
                    "compliance_with_regulatory_requirements",
                    "compliance_risk_management",
                    "internal_audits",
                    "anti_fraud",
                    "data_privacy_management",
                    "cyber_compliance",
                    "recruitment_of_staff",
                    "labor_relations_management",
                    "staff_training_and_development",
                    "talent_management_and_succession_planning",
                    "compensation_and_benefits",
                    "employee_performance_management",
                    "organizational_development_and_change",
                    "corporate_culture_and_employee_engagement",
                    "labor_legislation_and_regulatory_regulation",
                    "conflictology_and_resolution_of_labor_disputes",
                    "managing_remote_commands",
                    "strategic_communication_planning",
                    "media_relations",
                    "internal_communications",
                    "crisis_pr",
                    "reputation_management",
                    "working_with_social_media",
                    "organization_of_events",
                    "corporate_communications",
                    "work_with_public",
                    "content_development_and_copywriting",
                    "csr",
                    "b2b",
                    "b2c",
                    "sales_management",
                    "partner_network_development",
                    "sales_techniques_and_methodologies",
                    "training_and_development_of_sales_team",
                    "sales_support",
                    "competitor_and_market_analysis",
                    "business_strategic_planning",
                    "market_research_and_analysis",
                    "development_of_new_products_and_services",
                    "negotiating_and_concluding_deals",
                    "project_management",
                    "international_development",
                    "development_of_corporate_culture",
                    "financial_analysis_and_planning",
                    name="user_specialisation_enum",
                    schema="alh_community_platform",
                    inherit_schema=True,
                )
            ),
            nullable=True,
        ),
        sa.Column(
            "grade",
            sa.Enum(
                "grade1",
                "grade2",
                name="user_grade_enum",
                schema="alh_community_platform",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column(
            "industry",
            sa.ARRAY(
                sa.Enum(
                    "industry1",
                    "industry2",
                    name="user_industry_enum",
                    schema="alh_community_platform",
                    inherit_schema=True,
                )
            ),
            nullable=True,
        ),
        sa.Column(
            "skills",
            sa.ARRAY(
                sa.Enum(
                    "skill1",
                    "skill2",
                    name="user_skills_enum",
                    schema="alh_community_platform",
                    inherit_schema=True,
                )
            ),
            nullable=True,
        ),
        sa.Column("current_company", sa.String(length=200), nullable=True),
        sa.Column(
            "company_services",
            sa.ARRAY(
                sa.Enum(
                    "vkservice1",
                    "yandexservice1",
                    name="user_company_services_enum",
                    schema="alh_community_platform",
                    inherit_schema=True,
                )
            ),
            nullable=True,
        ),
        sa.Column(
            "location",
            sa.Enum(
                "moscow_russia",
                "london_uk",
                name="user_location_enum",
                schema="alh_community_platform",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column("referral", sa.Boolean(), nullable=False),
        sa.Column(
            "requests_to_community",
            sa.ARRAY(
                sa.Enum(
                    "friendship",
                    name="user_requests_to_community_enum",
                    schema="alh_community_platform",
                    inherit_schema=True,
                )
            ),
            nullable=True,
        ),
        sa.Column("is_tg_bot_blocked", sa.Boolean(), nullable=False),
        sa.Column("blocked_status_update_date", sa.DateTime(), nullable=True),
        sa.Column(
            "who_to_date_with",
            sa.Enum(
                "friends",
                "anyone",
                name="user_with_whom_enum",
                schema="alh_community_platform",
                inherit_schema=True,
            ),
            nullable=True,
        ),
        sa.Column(
            "who_sees_profile",
            sa.Enum(
                "anyone",
                "nobody",
                name="user_visibility_settings_enum",
                schema="alh_community_platform",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "who_sees_current_job",
            sa.Enum(
                "anyone",
                "nobody",
                name="user_visibility_settings_enum",
                schema="alh_community_platform",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "who_sees_contacts",
            sa.Enum(
                "anyone",
                "nobody",
                name="user_visibility_settings_enum",
                schema="alh_community_platform",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column(
            "who_sees_calendar",
            sa.Enum(
                "anyone",
                "nobody",
                name="user_visibility_settings_enum",
                schema="alh_community_platform",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="alh_community_platform",
    )
    op.create_index(
        "ix_users_telegram_id",
        "users",
        ["telegram_id"],
        unique=False,
        schema="alh_community_platform",
    )
    op.create_table(
        "forms",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("form", sa.Text(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "intent_type",
            postgresql.ENUM(
                "connect",
                "mentoring",
                "mock_interview",
                "help_request",
                "referal",
                name="e_intent_type",
            ),
            nullable=False,
        ),
        sa.Column(
            "meeting_format",
            postgresql.ENUM(
                "offline", "online", "both", name="e_meeting_format"
            ),
            nullable=False,
        ),
        sa.Column("calendar", sa.String(length=200), nullable=False),
        sa.Column("available_meetings_count", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("user_id", "id"),
        schema="alh_community_platform",
    )
    op.create_index(
        "ix_form_intent_type",
        "forms",
        ["intent_type"],
        unique=False,
        schema="alh_community_platform",
    )
    op.create_table(
        "meeting_responses",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("meeting_id", sa.Integer(), nullable=False),
        sa.Column(
            "role",
            postgresql.ENUM("organizer", "attendee", name="meeting_user_role"),
            nullable=False,
        ),
        sa.Column(
            "response",
            postgresql.ENUM(
                "confirmed", "tentative", "declined", name="meeting_response"
            ),
            nullable=True,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["meeting_id"],
            ["alh_community_platform.meetings.id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("user_id", "meeting_id"),
        schema="alh_community_platform",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("meeting_responses", schema="alh_community_platform")
    op.drop_index(
        "ix_form_intent_type",
        table_name="forms",
        schema="alh_community_platform",
    )
    op.drop_table("forms", schema="alh_community_platform")
    op.drop_index(
        "ix_users_telegram_id",
        table_name="users",
        schema="alh_community_platform",
    )
    op.drop_table("users", schema="alh_community_platform")
    op.drop_table("tg_bot_staff", schema="alh_community_platform")
    op.drop_table("tg_bot_logging_events", schema="alh_community_platform")
    op.drop_index(
        "ix_meeting_time",
        table_name="meetings",
        schema="alh_community_platform",
    )
    op.drop_index(
        "ix_meeting_status",
        table_name="meetings",
        schema="alh_community_platform",
    )
    op.drop_table("meetings", schema="alh_community_platform")

    op.execute(f"DROP TYPE {schema}.tg_event_type")
    op.execute(f"DROP TYPE {schema}.tg_staff_role")
    op.execute(f"DROP TYPE {schema}.meeting_response")
    op.execute(f"DROP TYPE {schema}.meeting_status")
    op.execute(f"DROP TYPE {schema}.meeting_user_role")
    op.execute(f"DROP TYPE {schema}.user_interests_enum")
    op.execute(f"DROP TYPE {schema}.user_expertise_enum")
    op.execute(f"DROP TYPE {schema}.user_specialisation_enum")
    op.execute(f"DROP TYPE {schema}.user_grade_enum")
    op.execute(f"DROP TYPE {schema}.user_industry_enum")
    op.execute(f"DROP TYPE {schema}.user_skills_enum")
    op.execute(f"DROP TYPE {schema}.user_company_services_enum")
    op.execute(f"DROP TYPE {schema}.user_location_enum")
    op.execute(f"DROP TYPE {schema}.user_requests_to_community_enum")
    op.execute(f"DROP TYPE {schema}.e_meeting_format")
    op.execute(f"DROP TYPE {schema}.e_intent_type")
    op.execute(f"DROP TYPE {schema}.user_with_whom_enum")
    op.execute(f"DROP TYPE {schema}.user_visibility_settings_enum")
    # ### end Alembic commands ###

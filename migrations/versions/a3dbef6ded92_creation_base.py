"""creation base

Revision ID: a3dbef6ded92
Revises: 
Create Date: 2024-11-24 19:41:19.869506

"""

from typing import Sequence, Union
from backend.db_proxy.common_db.db_abstract import schema

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = "a3dbef6ded92"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tg_bot_logging_events",
        sa.Column("telegram_name", sa.String(), nullable=True),
        sa.Column("telegram_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "event_type",
            sa.Enum(
                "message",
                "callback",
                name="tg_event_type",
                schema="alh_community_platform",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column("event_name", sa.String(), nullable=False),
        sa.Column("bot_state", sa.String(), nullable=True),
        sa.Column("content", sa.String(), nullable=True),
        sa.Column("chat_title", sa.String(), nullable=True),
        sa.Column("chat_id", sa.BigInteger(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="alh_community_platform",
    )
    op.create_table(
        "tg_bot_staff",
        sa.Column("telegram_name", sa.String(), nullable=False),
        sa.Column("telegram_id", sa.BigInteger(), nullable=True),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("surname", sa.String(), nullable=True),
        sa.Column("bio", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("phone_number", sa.String(), nullable=True),
        sa.Column(
            "role",
            sa.Enum(
                "admin",
                "manager",
                "community_manager",
                "activists_manager",
                "recruitment_manager",
                "mentoring_manager",
                name="tg_staff_role",
                schema="alh_community_platform",
                inherit_schema=True,
            ),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="alh_community_platform",
    )
    op.create_table(
        "users",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("surname", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("avatars", sa.ARRAY(sa.String(length=300)), nullable=True),
        sa.Column("about", sa.String(length=300), nullable=True),
        sa.Column(
            "interests",
            sa.ARRAY(
                sa.Enum(
                    "interest1",
                    "interest2",
                    name="interests_enum",
                    schema="alh_community_platform",
                    inherit_schema=True,
                )
            ),
            nullable=True,
        ),
        sa.Column("linkedin_link", sa.String(length=100), nullable=True),
        sa.Column("telegram_name", sa.String(length=200), nullable=True),
        sa.Column("telegram_id", sa.BIGINT(), nullable=True),
        sa.Column("city_live", sa.String(length=200), nullable=True),
        sa.Column("country_live", sa.String(length=100), nullable=True),
        sa.Column("phone_number", sa.String(length=20), nullable=True),
        sa.Column("is_tg_bot_blocked", sa.Boolean(), nullable=False),
        sa.Column("blocked_status_update_date", sa.DateTime(), nullable=True),
        sa.Column(
            "requests_to_society",
            sa.ARRAY(sa.String(length=100)),
            nullable=True,
        ),
        sa.Column(
            "professional_interests",
            sa.ARRAY(sa.String(length=100)),
            nullable=True,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="alh_community_platform",
    )
    op.create_index(
<<<<<<< HEAD:migrations/versions/a7c86619c69a_creation_base.py
        "ix_users_telegram_id", "users", ["telegram_id"],
        unique=False,
        schema='alh_community_platform'
    )
    # предоставляем необходимые доступы для пользователя YNDXFamily_db_owner
    op.execute(f'GRANT USAGE ON SCHEMA {schema} TO "YNDXFamily_db_owner"')
    op.execute(
        f'GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA {schema} TO "YNDXFamily_db_owner"')
    op.execute(
        f'GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA {schema} TO "YNDXFamily_db_owner"')

    # Meetings and requests
    op.create_table(
        "meetings",
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("location", sa.String(length=200), nullable=True),
        sa.Column(
            "scheduled_time", sa.DateTime(timezone=True), nullable=False
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "new", "confirmed", "archived", name="meeting_status"
            ),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="alh_community_platform",
    )
    op.create_index(
        "ix_meeting_status",
        "meetings",
        ["status"],
        unique=False,
        schema="alh_community_platform",
    )
    op.create_index(
        "ix_meeting_time",
        "meetings",
        ["scheduled_time"],
        unique=False,
        schema="alh_community_platform",
    )
    op.create_table(
        "meeting_responses",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("meeting_id", sa.Integer(), nullable=False),
        sa.Column(
            "role",
            postgresql.ENUM("organizer", "attendee", name="meeting_user_role"),
            nullable=False,
        ),
        sa.Column(
            "response",
            postgresql.ENUM(
                "confirmed", "tentative", "declined", name="meeting_response"
            ),
            nullable=True,
        ),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["meeting_id"],
            ["alh_community_platform.meetings.id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["alh_community_platform.users.id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("user_id", "meeting_id"),
        schema="alh_community_platform",
    )
        "ix_users_telegram_id",
        "users",
        ["telegram_id"],
        unique=False,
        schema="alh_community_platform",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Meetings and responses
    op.drop_table("meeting_responses", schema="alh_community_platform")
    op.drop_index(
        "ix_meeting_time",
        table_name="meetings",
        schema="alh_community_platform",
    )
    op.drop_index(
        "ix_meeting_status",
        table_name="meetings",
        schema="alh_community_platform",
    )
    op.drop_table("meetings", schema="alh_community_platform")
    op.execute(f"DROP TYPE {schema}.meeting_response")
    op.execute(f"DROP TYPE {schema}.meeting_status")
    op.execute(f"DROP TYPE {schema}.meeting_user_role")

    # ^ Meetings and responses

    op.drop_index("ix_users_telegram_id", table_name="users", schema="alh_community_platform")
    op.drop_index(
        "ix_users_telegram_id",
        table_name="users",
        schema="alh_community_platform",
    )
    op.drop_table("users", schema="alh_community_platform")
    op.drop_table("tg_bot_staff", schema="alh_community_platform")
    op.drop_table("tg_bot_logging_events", schema="alh_community_platform")
    op.execute(f"DROP TYPE {schema}.tg_event_type")
    op.execute(f"DROP TYPE {schema}.tg_staff_role")
    op.execute(f"DROP TYPE {schema}.meeting_response")
    op.execute(f"DROP TYPE {schema}.meeting_status")
    op.execute(f"DROP TYPE {schema}.meeting_user_role")
    op.execute(f"DROP TYPE {schema}.interests_enum")

    # ### end Alembic commands ###
